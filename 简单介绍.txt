大家现在要完成的主要是bin目录下的功能文件，

!!!!
read_command返回的命令结构中，num_params是以-1开始计数的，但是num_value是从0开始计数的，注意区别
num_params=0表示有一个参数，尽量不要使用指针是否为NULL判断，num_value=1表示当前的参数有一个值，因为有一些命令如cp，输入的一个参数可能需要多个值，一个是原始路径，一个是目标路径



输出里面可能有一些提示词，方便观察的，如果觉得麻烦可以在src/promt.c中的read_command函数中注释掉
main函数中也有一定的输出，就是最开始的命令集合的输出，也可以注释掉，

注意：read_command只能解析单个命令，也就是说，如果输入了类似命令：ls -a | grep "text"，会转到特殊命令里面（因为这些命令集合了多个命令）

大家要先看看框架，测试的话，运行 main.c 就可以了， 输入exit退出， 或者可以直接调试器终止

对于多个命令集合的实现，可以分割之后执行
// 可以使用下面的方法对input进行分割
char str[] = "token1,token2,token3";
const char delimiters[] = ",";  // 分隔符

// 使用strtok分割字符串
char *token = strtok(str, delimiters);

// 遍历所有标记
while (token != NULL) {
    printf("Token: %s\n", token);

    // 获取下一个标记
    token = strtok(NULL, delimiters);
}
使用相对路径时，尽量把相对路径设置在二进制文件的同目录下，否则无法读取，将出现错误。
